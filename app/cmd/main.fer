/*
Language Core Principles

1. Simplicity: The language should be easy to learn and use, with a clear and concise syntax.
2. It must work as it looks. No hidden magic, no implicit behavior.
3. Safety: The language should prevent common programming errors, such as null pointer dereferences and buffer overflows at compile time.
*/

import "app/data";
//import "std/fmt";
//import "std/io";
//import "std/math";
//import "github.com/user/repo/file";

// Examples of the new explicit import system:
// - All local imports must include the root folder name (e.g., "code/data", not just "data")
// - No relative paths (./ or ../) allowed
// - Standard library imports use "std/" prefix
// - External libraries use "github.com/user/repo/path" format
// - .fer extension is automatically added by the resolver

// Test numeric operations (should return largest type)
let x: i32 = 42;
let y: i64 = 100;
let z: i64 = x + y; // i32 + i64 should result in i64

// Test string concatenation (should only work with str + str)
let str1: str = "Hello ";
let str2: str = "World";
let greeting: str = str1 + str2; // str + str should work

// This should cause an error (str + non-str)
// let invalid: str = str1 + x;

let a = 5;
let b = 10;
let sum = 1+3;

let name, age : str, i32 = "John", 30;

let importedData = data::myData;

//supports different numeric types and formatting
let pi : f64 = 3.14159;
//for larger numbers, use _ as a separator
let largeNumber : i32 = 1_000_000;
//octals, hexadecimals, and binary literals are supported
let octal : i32 = 0o755; // octal representation
let hex : i32 = 0xFF; // hexadecimal representation
let binary : i32 = 0b101010; // binary representation
//support scientific notation
let scientific : f64 = 1.23e4; // 1.23 * 10^4

// type MyType = i32 | str | null;

// let a : i32 = 10;
// let b : MyType = "Hello"; // or we could use let b : i32 | str | null = 20;

// if when b { is i32 => true, _ false } {

// }

// fn add(a: i32, b: MyType) -> i32 {
//     return a + when b {
//         is i32 => b,
//         is str => 0, // or some other logic
//         is null => 0,
//         _ => 0, // default case for all other types. though in this case, it would never reach here
//     };
// }



//let someValue = laterDeclaredValue;
let laterDeclaredValue = "This value is declared later in the code.";

type Car struct {
    make: str,
    model: str,
    year: i32
};

let myCar = @Car {
    make: "Toyota",
    model: "Corolla",
    year: 2020
};

myCar.make = "Honda"; // Update the make of the car
//notAnObject.notAField = "This will cause a compile-time error"; // This will cause an error since notAField does not exist in Car struct

let cxx : data::MyType = data::kk;
let myOtherCar: Car = @Car {
    make: "Ford",
    model: "Mustang",
    year: 2021
};

let nulltype: null = null; // Explicit null type

//array
let numbers = [1, 2, 3, 4, 5]; // Array of integers
// let mixedArray = [1, "two", 3.0]; // Array